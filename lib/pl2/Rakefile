require 'active_record_tasks'
require 'pry-byebug'
ActiveRecordTasks.configure do |config|
  # These are all the default values
  config.db_dir = 'db'
  config.db_config_path = 'db/config.yml'
  config.env = ENV['RAILS_ENV'] || 'test'
end

# Run this AFTER you've configured
ActiveRecordTasks.load_tasks

task :load_app do
  puts "Loading application"
  # [code to require and set up your application would go here]
  ENV['RAILS_ENV'] ||= 'test'
  require_relative './lib/pl.rb'
  require 'securerandom'
  require 'active_record'
  require 'mp3info'
  require 'aws-sdk'
end

task :sandbox => [:load_app] do
  binding.pry
  puts ''
end

task :backup_storage_remotely => [:load_app] do
  ash = PL::AudioFileStorageHandler.new
  all_stored_songs = ash.get_all_songs

  s3 = AWS::S3.new
  
  backup_bucket = s3.buckets['playolasongsbackup']
  original_bucket = s3.buckets['playolasongs']

  all_stored_songs.each_with_index do |song, i|
    from_obj = original_bucket.objects[song.key]
    to_obj = backup_bucket[song.key]
    from_obj.copy_to(to_obj)
    print "\rBacking Up Song#{i + 1} of #{all_songs.count}"
  end
end



namespace :db do
  task :migrate do
    puts "Migrating database"
    # [code to migrate database would go here]
  end

  task :clear_users => [:load_app, :clear_stations, :clear_stations] do
    puts 'Clearing Users'
    PL.db.destroy_all_users
  end

  task :clear_stations => [:load_app, :clear_listening_sessions] do
    puts 'Clearing Stations...'
    PL.db.destroy_all_stations
  end

  task :clear_listening_sessions => [:load_app] do
    puts 'Clearing ListeningSessions...'
    PL.db.destroy_all_listening_sessions
  end

  task :update_keys => [:load_app] do
    ash = PL::AudioFileStorageHandler.new
    all_songs = ash.get_all_songs
    puts "updating_keys..."
    all_songs.each_with_index do |stored_song, i|
      db_song = PL.db.get_songs_by_title_and_artist({ title: stored_song.title,
                                                      artist: stored_song.artist })[0]
      if db_song && (db_song.key != stored_song.key)
        PL.db.update_song({ id: db_song.id,
                            key: stored_song.key })
        puts i.to_s + ": " + stored_song.key
      else
        puts stored_song.key + ": unchanged"
      end
    end
  end

  task :fix_keys => [:load_app] do
    ash = PL::AudioFileStorageHandler.new
    all_stored_songs = ash.get_all_songs

    s3 = AWS::S3.new
    bucket = s3.buckets[S3['SONGS_BUCKET']]

    puts "fixing keys..."
    puts "count = " + all_stored_songs.count.to_s

    all_stored_songs.each_with_index do |stored_song, i|
      print "\rFixing song #{i + 1} of #{all_stored_songs.count}"
      db_song = PL.db.get_song_by_key(stored_song.key)
      
      if !db_song
        puts "Error on song #{i}, key: #{stored_song.key}... Song not found in db"
      else
        old_key = db_song.key
        new_key = old_key.gsub(' ', '-').gsub('_','-').gsub(/[^a-zA-Z0-9\-\.]/, '')

        if new_key != old_key
          PL.db.update_song({ id: db_song.id, key: new_key })

          # get song and copy it
          bucket.objects[new_key].copy_from(old_key)
          bucket.objects.delete(old_key)
        else
          puts 'key ok'
        end
      end
    end
  end

  task :load_itunes_info => [:load_app] do
    sp = PL::SongProcessor.new
    songs = PL.db.get_all_songs
    songs.each_with_index do |song, i|
      if (!song.album_artwork_url || !song.itunes_track_view_url)
        print("Song #{i}: " + song.title + '... ')
        itunes_info = sp.get_itunes_info({ artist: song.artist, title: song.title })
        
        if itunes_info
          puts("found")
          PL.db.update_song({ id: song.id, album_artwork_url: itunes_info[:album_artwork_url],
                            itunes_track_view_url: itunes_info[:itunes_track_view_url] })
        else
          puts("NO MATCH")
        end
      end
    end
  end

    task :refresh_album_artwork => [:load_app] do
    sp = PL::SongProcessor.new
    songs = PL.db.get_all_songs
    songs.each_with_index do |song, i|
      print("Song #{i}: " + song.title + '... ')
      itunes_info = sp.get_itunes_info({ artist: song.artist, title: song.title })
      
      if itunes_info
        puts("found")
        PL.db.update_song({ id: song.id, album_artwork_url: itunes_info[:album_artwork_url],
                          itunes_track_view_url: itunes_info[:itunes_track_view_url] })
      else
        puts("NO MATCH")
      end
    end
  end

  task :load_genres => [:load_app] do
    sp = PL::SongProcessor.new
    songs = PL.db.get_all_songs
    PL.db.destroy_all_genres
    counter = 1
    puts
    songs.each do |song|
      begin
        genres = sp.get_echonest_info({ title: song.title, artist: song.artist })[:genres]
      rescue Echowrap::Error::TooManyRequests
        i=1
        puts 'sleeping 10 secs for echonest...'
        while i <= 10
          print "\r" + i.to_s
          sleep(1)
          i += 1
        end
        puts
        retry
      end

      PL.db.store_genres({ song_id: song.id, genres: genres })
      puts "Loading Genres Song " + counter.to_s  + " of " + songs.size.to_s + " " + "title: " + song.title + " artist: " + song.artist + " " + genres.to_s
      counter += 1

    end
  end

  task :load_db_via_echonest => [:load_app] do
    PL.db.clear_everything

    song_pool = PL::SongPoolHandler.new
    all_songs = song_pool.all_songs

    
    puts "Adding songs from echonest...."
    all_songs.each_with_index do |song, i|
      print "\rAdding song #{i + 1} of #{all_songs.count}" 
            PL.db.create_song({ title: song.title,
                          artist: song.artist,
                          album: song.album,
                          key: song.key,
                          duration: song.duration,
                          echonest_id: song.echonest_id })
    end

  end

  task :load_db_via_storage => [:load_app] do
    PL.db.clear_everything

    song_pool = PL::SongPoolHandler.new

    puts "getting stored songs..."
    @storage = PL::AudioFileStorageHandler.new
    all_stored_songs = @storage.get_all_songs


    puts "Adding Songs to song pool"
    song_pool.clear_all_songs
    song_pool.add_songs(all_stored_songs.dup)
    

    puts "Adding Songs to db"
    all_stored_songs.each_with_index do |song, i|
      print "\rProcessing song #{i + 1} of #{all_stored_songs.count}"

      song.instance_variables
      PL.db.create_song({ title: song.title || "",
                          artist: song.artist || "",
                          album: song.album || "",
                          key: song.key,
                          duration: song.duration,
                          echonest_id: song.echonest_id || "" })
    end
  end

  task :update_stored_songs_info => [:load_app] do
    # create the handlers
    ash = PL::AudioFileStorageHandler.new
    sp = PL::SongProcessor.new
    song_pool = PL::SongPoolHandler.new

    puts "Getting all currently stored info..."
    all_songs = ash.get_all_songs
    puts
    puts "           artist:                                             title:"
    puts "----------------------------------------------------------------------"
    all_songs.each_with_index do |song, i|
      # grab the file
      temp_song_file = ash.grab_audio(song)
      
      # get it's tags
      tags = sp.get_id3_tags(temp_song_file)

      # grab the songpool info
      echonest_info = sp.get_echonest_info({ title: tags[:title], artist: tags[:artist] })

      # decide on final values
      finalized_info = {}
      finalized_info[:key] = song.key
      finalized_info[:duration] = tags[:duration]
      finalized_info[:album] = tags[:album]


      # use the id3 tags if no suitable match found
      if (echonest_info[:artist_match_rating] < 0.8) || (echonest_info[:title_match_rating] < 0.8)
        finalized_info[:artist] = tags[:artist]
        finalized_info[:title] = tags[:title]
        finalized_info[:echonest_id] == 'SET_TO_NIL'
      else
        finalized_info[:echonest_id] = echonest_info[:echonest_id]
      end

      ash.update_stored_song_metadata(finalized_info)
      
      tags[:artist] ||= ''
      tags[:title] ||= ''
      echonest_info[:artist] ||= ''
      echonest_info[:title] ||= ''

      puts "     id3: " + tags[:artist] + (' ' * (75 - tags[:artist].size)) + tags[:title]
      puts "echonest: " + echonest_info[:artist] + (' ' * (75 - echonest_info[:artist].size)) + echonest_info[:title]

      puts "   match: " + echonest_info[:artist_match_rating].round(3).to_s + (' ' * (50 - echonest_info[:artist_match_rating].round(3).to_s.size)) + echonest_info[:title_match_rating].round(3).to_s
      
      puts "song number : " + (i + 1).to_s
      if finalized_info[:echonest_id] == nil
        puts "ECHONEST_ID NOT UPDATED"
      end
      
      puts

    end

  end
end